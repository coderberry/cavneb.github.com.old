<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | coderberry.me]]></title>
  <link href="http://coderberry.me/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://coderberry.me/"/>
  <updated>2012-04-23T13:48:17-06:00</updated>
  <id>http://coderberry.me/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bunny RabbitMQ]]></title>
    <link href="http://coderberry.me/blog/2011/08/09/bunny-rabbitmq/"/>
    <updated>2011-08-09T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2011/08/09/bunny-rabbitmq</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/crazy-rabbit.jpg"></p>

<p>Recently I was asked to implement <a href="https://github.com/defunkt/resque">Redis/Resque</a> into an existing project that already had Redis up and running with another Redis server. This ended up being a lot more difficult than I had anticipated due to the <a href="https://github.com/defunkt/resque/blob/master/lib/resque.rb">singleton nature</a> of the Resque gem. This led us to explore other possible options and we ended up on <a href="http://www.rabbitmq.com/">RabbitMQ</a>.</p>

<p>RabbitMQ has two heavily supported gems that can be used to interface with our Rails app. One of them is the <a href="http://rubydoc.info/github/ruby-amqp/amqp/master/file/docs/AMQP091ModelExplained.textile">AMQP gem</a>. It is very powerful and acts as a daemon for both publisher and consumer. Our needs aren't as big, however, so we decided to use the <a href="https://github.com/celldee/bunny">bunny gem</a>.</p>

<p>Initially, I started off by wanting to create a publisher/consumer scenario. I installed RabbitMQ on a <a href="http://www.virtualbox.org/">VirtualBox</a> using <a href="http://vagrantup.com/">Vagrant</a>.</p>

<p><code>
$ gem install vagrant # See vangrantup.com for install instructions
$ vagrant box add base http://files.vagrantup.com/lucid32.box
$ vagrant init
</code></p>

<p>Make sure you modify your Vagrantfile to allow port access for the tcp protocol:</p>

<p><code>ruby    
config.vm.forward_port "tcp", 5672, 5672
</code></p>

<p>Then I started up the server, logged in and installed the RabbitMQ server:</p>

<pre><code>$ vagrant up
$ vagrant ssh
vagrant@lucid32:~$ sudo apt-get install rabbitmq-server
...
</code></pre>

<p>Once this is done, the RabbitMQ server starts automatically. To ensure that it's working you can run the following command. Remember to run it as sudo.</p>

<p><code>
vagrant@lucid32:~$ sudo rabbitmqctl list_queues
Listing queues ...
...done.
vagrant@lucid32:~$
</code></p>

<p>Now that this works, let's play with the gem. Ensure that you have the bunny gem installed.</p>

<p><code>
$ gem install bunny
</code></p>

<p>Once this is installed, start up a console and we will create a queue.</p>

<p>``` ruby
$ irb</p>

<blockquote><p>require 'rubygems'
 => true
require 'bunny'
 => true
my_client = Bunny.new
 => #&lt;Bunny::Client:0x1095a..., @port=5672>
my_client.start
 => :connected
my_queue = my_client.queue('my_first_queue')
 => #&lt;Bunny::Queue:0x1063v..., @port=5672>>
```</p></blockquote>

<p>Now we have a queue created. Let's go back to our RabbitMQ server and run the list_queues command again.</p>

<p><code>
vagrant@lucid32:~$ sudo rabbitmqctl list_queues
Listing queues ...
my_first_queue  0
...done.
vagrant@lucid32:~$
</code></p>

<p>As you can see, we now have the <em>my_first_queue</em> queue created with 0 items in the queue.</p>

<p>Let's now add a message to the queue.</p>

<p>``` ruby</p>

<blockquote><p>direct_exchange = my_client.exchange('')
direct_exchange.publish('This is my first message', :key => my_queue.name
 => nil
my_queue.message_count
 => 1
```</p></blockquote>

<p>And now when you run the <em>list_queues</em> command, you will see it has a <strong>1</strong> after the <em>my_first_queue</em>.</p>

<p><code>
vagrant@lucid32:~$ sudo rabbitmqctl list_queues
Listing queues ...
my_first_queue  1
...done.
vagrant@lucid32:~$
</code></p>

<p>Awesome. Now that we know how to add messages into our RabbitMQ server using the bunny gem, let's now create a consumer to read the messages from the queue.</p>

<p>Let's open up another terminal and run irb. This part will be the same as before.</p>

<p>```
$ irb</p>

<blockquote><p>require 'rubygems'
 => true
require 'bunny'
 => true
my_client = Bunny.new
 => #&lt;Bunny::Client:0x1095a..., @port=5672>
my_client.start
 => :connected
my_queue = my_client.queue('my_first_queue')
 => #&lt;Bunny::Queue:0x1063v..., @port=5672>>
 ...
my_queue.message_count
 => 1
```</p></blockquote>

<p>To grab the next item in the queue, we would call <em>pop</em> on <em>my_queue</em></p>

<p>``` ruby</p>

<blockquote><p>msg = my_queue.pop[:payload]
 => "This is a test message"
my_queue.message_count
 => 0
```</p></blockquote>

<p>If we want it to run as a listener, we can place the <em>pop</em> in a loop.</p>

<p>``` ruby</p>

<blockquote><p>loop do
  if my_queue.message_count > 0</p>

<pre><code>msg = my_queue.pop[:payload]
puts "Found Message: #{msg}"
</code></pre>

<p>  else</p>

<pre><code>sleep 5
</code></pre>

<p>  end
end
```</p></blockquote>

<p>There you have it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix the iconv require error in Ruby 1.9 and RVM]]></title>
    <link href="http://coderberry.me/blog/2011/05/17/how-to-fix-the-iconv-require-error-in-ruby-1-dot-9-and-rvm/"/>
    <updated>2011-05-17T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2011/05/17/how-to-fix-the-iconv-require-error-in-ruby-1-dot-9-and-rvm</id>
    <content type="html"><![CDATA[<p><em>This post was copied from <a href="http://exceptionz.wordpress.com/2010/02/03/how-to-fix-the-iconv-require-error-in-ruby-1-9/">exceptions.wordpress.com</a> with minor updates.</em></p>

<p>So you are working with RVM / Rails 3 / Ruby 1.9.2 and you keep on getting the following error:</p>

<p><code>
'require': no such file to load â€“ iconv (LoadError)
</code></p>

<p><strong>To fix the issue, perform the following steps:</strong></p>

<ol>
<li>Install readline using rvm: rvm install readline rvm package install readline</li>
<li>Now install iconv by executing: rvm install iconv rvm package install iconv</li>
<li>If you already have a version of Ruby 1.9 installed, we need to remove it by executing:</li>
</ol>


<p><code>
$ rvm remove 1.9.2
</code></p>

<ol>
<li>The final step is to re-install the version of ruby:</li>
</ol>


<p><code>
$ rvm install --trace 1.9.2 -C --with-iconv-dir=$HOME/.rvm/usr
</code></p>

<p><strong>Now to test that it worked:</strong></p>

<ol>
<li>Change to the ruby version you installed: <em>rvm use 1.9.2</em></li>
<li>Check you are on the right version of ruby:</li>
</ol>


<p><code>
$ ruby -v
ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.6.0]
</code></p>

<ol>
<li>Start a new irb session</li>
<li>Now you should be able to require 'iconv' and get a 'true' result</li>
</ol>


<p><code>
ruby-1.9.2-p180 :001 &gt; require 'iconv'
=&gt; true
</code></p>

<p>Now you should be good to go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-Line Rails Logger Trick]]></title>
    <link href="http://coderberry.me/blog/2010/05/27/multi-line-rails-logger-trick/"/>
    <updated>2010-05-27T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2010/05/27/multi-line-rails-logger-trick</id>
    <content type="html"><![CDATA[<p>One thing that I like to do with my logger output is allow for multi-line output. It makes it much easier to read and keeps my code cleaner.</p>

<p>Instead of doing this:</p>

<p><code>ruby
logger.info "Current Contest: #{@contest.name}"
logger.info "Current User: #{@contest.name}"
</code></p>

<p>You can do this:</p>

<p>``` ruby
logger.info """</p>

<pre><code>Current Contest: #{@contest.name}
Current User: #{@contest.name}
</code></pre>

<p>"""
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using multiple SMTP accounts with Rails &amp; ActionMailer]]></title>
    <link href="http://coderberry.me/blog/2009/03/30/using-multiple-smtp-accounts-with-rails-and-actionmailer/"/>
    <updated>2009-03-30T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2009/03/30/using-multiple-smtp-accounts-with-rails-and-actionmailer</id>
    <content type="html"><![CDATA[<p>Recently I ran into a problem where I needed to be able to send emails via two different SMTP accounts within the same Rails application. I scoured the net trying to find a method to do this, but I couldn't find one. So I pulled out my hack-hat and got started.</p>

<p>If there are any better ways to do this, I would love to hear about it.</p>

<p>I first created a new YAML file in my config folder called <code>action_mailer.yml</code>. In this file, I specified three different nodes with the actionmailer settings.</p>

<p>```yaml
development:
  ...</p>

<p>test:
  ...</p>

<p>production:
  website1:</p>

<pre><code>domain: "gary@superfriends.com"
user_name: gary
password: superduper
address: smtp.gmail.com
port: 587
authentication: :plain
</code></pre>

<p>  website2:</p>

<pre><code>domain: mysupercooldomain.com
user_name: ABCDEF
password: blahblah
address: mail.authsmtp.com
port: 25
authentication: :plain
</code></pre>

<p>```</p>

<p>Afterwards, I created two mailer models that represent each of the different mailers I will use.</p>

<p>```ruby</p>

<h1>app/models/mailer1.rb</h1>

<p>class Website1 &lt; ActionMailer::Base
  def load_settings</p>

<pre><code>options = YAML.load_file("#{RAILS_ROOT}/config/action_mailer.yml")[RAILS_ENV]["website1"]
@@smtp_settings = {
  :address              =&gt; options["address"],
  :port                 =&gt; options["port"],
  :domain               =&gt; options["domain"],
  :authentication       =&gt; options["authentication"],
  :user_name            =&gt; options["user_name"],
  :password             =&gt; options["password"]
}
</code></pre>

<p>  end</p>

<p>  def welcome_email(recipient, sent_at = Time.now)</p>

<pre><code>load_settings
@subject = 'Thank you for visiting website 1'
@recipients = RAILS_ENV == "production" ? recipient : "cavneb@gmail.com"
@from = 'gary@superfriends.com'
@sent_on = sent_at
</code></pre>

<p>  end
end
```</p>

<p>```ruby</p>

<h1>app/models/mailer2.rb</h1>

<p>class Website2 &lt; ActionMailer::Base
  def load_settings</p>

<pre><code>options = YAML.load_file("#{RAILS_ROOT}/config/action_mailer.yml")[RAILS_ENV]["website2"]
@@smtp_settings = {
  :address              =&gt; options["address"],
  :port                 =&gt; options["port"],
  :domain               =&gt; options["domain"],
  :authentication       =&gt; options["authentication"],
  :user_name            =&gt; options["user_name"],
  :password             =&gt; options["password"]
}
</code></pre>

<p>  end</p>

<p>  def welcome_email(recipient, sent_at = Time.now)</p>

<pre><code>load_settings
@subject = 'Thank you for visiting website 2'
@recipients = RAILS_ENV == "production" ? recipient : "cavneb@gmail.com"
@from = 'info@mysupercooldomain.com'
@sent_on = sent_at
</code></pre>

<p>  end
end
```</p>

<p>So now when I send an email, I can first determine which mailer to use and then send the email.</p>

<p>For example, your controller might have code that looks like this:</p>

<p>```ruby</p>

<h1>Found in code of controller</h1>

<p>if session[:template_name] == "website1"
  Website1.deliver_welcome_email("cavneb@gmail.com")
else
  Website2.deliver_welcome_email("cavneb@gmail.com")
end
```</p>

<p>I realize this is probably the hard way, but hey, it's a start. Please post any plugins or alternatives to doing this if you know of any.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Custom SOAP Requests with Ruby and Net::HTTP]]></title>
    <link href="http://coderberry.me/blog/2008/12/19/creating-custom-soap-requests-with-ruby-and-net-http/"/>
    <updated>2008-12-19T00:00:00-07:00</updated>
    <id>http://coderberry.me/blog/2008/12/19/creating-custom-soap-requests-with-ruby-and-net-http</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/golf_scale.jpg"></p>

<p>I interviewed at a company a while ago and one of the questions they asked me was the familiar "You have 8 golf balls and a justice scale. One of the golf balls has a bubble in it making it a tiny bit lighter, but you can't tell by looking at it or holding it. How many times do you need to use the scale in order to find the defective ball?". I left the interview thinking that the answer was 3. After about 3 hours of thinking about it, I realized that the answer was 2 tries.</p>

<p>The reason I share this with you is because today I found the answer to something that I've been thinking about for much longer than 3 hours. For about 1 1/2 years, I have been trying to find a good way to simply post a SOAP request via ruby without having to use SOAP4r or WSDL's. Some of you might find this a bit odd that it took me this long to figure this out, but then again, it's almost impossible to find any examples of this online.</p>

<p>Enough history. Let's get to the code.</p>

<p>In my book, <a href="http://www.amazon.com/gp/product/0596520700?ie=UTF8&amp;tag=kobu-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596520700">Rails Pocket Reference</a>, I have a section about using SOAP. In the example, I used the soap/wsdlDriver library to parse a WSDL from GeoCoder.us, a free US address geocoder tool. Instead of using the WSDL, you can access the response directly.</p>

<p>```ruby
require 'net/http'
require 'net/https'</p>

<h1>Create te http object</h1>

<p>http = Net::HTTP.new('rpc.geocoder.us', 80)
http.use_ssl = false
path = '/service/soap/'</p>

<h1>Create the SOAP Envelope</h1>

<p>data = &lt;<-EOF
<?xml version="1.0" encoding="UTF-8"?>
&lt;SOAP-ENV:Envelope
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
  SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
  &lt;SOAP-ENV:Body></p>

<pre><code>&lt;m:geocode xmlns:m="http://rpc.geocoder.us/Geo/Coder/US/"&gt;
  &lt;location xsi:type="xsd:string"&gt;1005 Gravenstein Highway North Sebastopol, CA 95472&lt;/location&gt;
&lt;/m:geocode&gt;
</code></pre>

<p>  &lt;/SOAP-ENV:Body>
&lt;/SOAP-ENV:Envelope>
EOF</p>

<h1>Set Headers</h1>

<p>headers = {
  'Referer' => 'http://www.appfusion.net',
  'Content-Type' => 'text/xml',
  'Host' => 'rpc.geocoder.us'
}</p>

<h1>Post the request</h1>

<p>resp, data = http.post(path, data, headers)</p>

<h1>Output the results</h1>

<p>puts 'Code = ' + resp.code
puts 'Message = ' + resp.message
resp.each { |key, val| puts key + ' = ' + val }
puts data
```</p>

<p>I hope this makes using SOAP with Ruby a lot less cryptic for other as it does me.</p>
]]></content>
  </entry>
  
</feed>
