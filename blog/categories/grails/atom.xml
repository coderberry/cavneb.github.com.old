<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grails | coderberry.me]]></title>
  <link href="http://coderberry.me/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://coderberry.me/"/>
  <updated>2012-04-24T16:10:11-06:00</updated>
  <id>http://coderberry.me/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grails Domain Classes and Enums]]></title>
    <link href="http://coderberry.me/blog/2012/04/23/grails-domain-classes-and-enums/"/>
    <updated>2012-04-23T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2012/04/23/grails-domain-classes-and-enums</id>
    <content type="html"><![CDATA[<p>For a long time, I have been creating static int values to represent states in domain classes. For example, I would have something like the following:</p>

<p>```java
package org.example</p>

<p>class PluginPendingApproval {</p>

<p>  static final int STATUS_PENDING  = 1
  static final int STATUS_APPROVED = 2
  static final int STATUS_REJECTED = 3</p>

<p>  int status</p>

<p>  static constraints = {</p>

<pre><code>status blank: false, inList: [
  STATUS_PENDING_APPROVAL, STATUS_APPROVED, STATUS_REJECTED
]
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>Peter Ledbrook ( <a href="https://twitter.com/#!/pledbrook">@pledbrook</a> ) gave me some tips on how to handle this better using <code>Enums</code>. Enum values should always be in uppercase letters because they are constants in the fixed set. If we were to refactor the code above, it would something more like this:</p>

<p>```java
package org.example</p>

<p>class PluginPendingApproval {</p>

<p>  enum ApprovalStatus {</p>

<pre><code>PENDING, APPROVED, REJECTED
</code></pre>

<p>  }</p>

<p>  ApprovalStatus status</p>

<p>  static constraints = {</p>

<pre><code>status blank: false
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>This works great for a single domain class, but what if I wanted to use the same Enum in two different domain classes. For example:</p>

<p>```java
// PluginPendingApproval.groovy
package org.example</p>

<p>class PluginPendingApproval {</p>

<p>  static hasMany = [pluginPendingApprovalRequests: PluginPendingApprovalRequest]</p>

<p>  enum ApprovalStatus {</p>

<pre><code>PENDING, APPROVED, REJECTED
</code></pre>

<p>  }</p>

<p>  ApprovalStatus status</p>

<p>  static constraints = {</p>

<pre><code>status blank: false
</code></pre>

<p>  }</p>

<p>}</p>

<p>// PluginPendingApprovalRequest.groovy
package org.example</p>

<p>class PluginPendingApprovalRequest {</p>

<p>  static belongsTo = [pluginPendingApproval: PluginPendingApproval]</p>

<p>  enum ApprovalStatus {</p>

<pre><code>PENDING, APPROVED, REJECTED
</code></pre>

<p>  }</p>

<p>  ApprovalStatus status</p>

<p>  static constraints = {</p>

<pre><code>status blank: false
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>I could keep do it this way where I have the enum code duplicated in two places, but that doesn't follow the DRY principal.</p>

<p>Let's refactor this and create a new Enum class that both domain classes can use:</p>

<p>```java
package org.example</p>

<p>public enum ApprovalStatusEnum {</p>

<pre><code>PENDING, APPROVED, REJECTED
</code></pre>

<p>}
```</p>

<p>Now both of my domain classes can access the same Enum:</p>

<p>```java
// PluginPendingApproval.groovy
package org.example</p>

<p>class PluginPendingApproval {</p>

<p>  static hasMany = [pluginPendingApprovalRequests: PluginPendingApprovalRequest]</p>

<p>  ApprovalStatus status</p>

<p>  static constraints = {</p>

<pre><code>status blank: false
</code></pre>

<p>  }</p>

<p>}</p>

<p>// PluginPendingApprovalRequest.groovy
package org.example</p>

<p>class PluginPendingApprovalRequest {</p>

<p>  static belongsTo = [pluginPendingApproval: PluginPendingApproval]</p>

<p>  ApprovalStatus status</p>

<p>  static constraints = {</p>

<pre><code>status blank: false
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>For more information on Enums in Groovy, see <a href="http://groovy.codehaus.org/Using+Enums">http://groovy.codehaus.org/Using+Enums</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy &amp; Grails - Want to know more?]]></title>
    <link href="http://coderberry.me/blog/2011/10/18/groovy-and-grails-want-to-know-more/"/>
    <updated>2011-10-18T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2011/10/18/groovy-and-grails-want-to-know-more</id>
    <content type="html"><![CDATA[<p>For those who are new to Groovy and Grails, here are a list of screencasts I created a while ago, along with a couple of slideshare presentations.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/uF3ilkcXMjM" frameborder="0" allowfullscreen></iframe>


<iframe width="560" height="315" src="http://www.youtube.com/embed/ahRMgvKbVLI" frameborder="0" allowfullscreen></iframe>


<iframe width="560" height="315" src="http://www.youtube.com/embed/ILL2TXAF04k" frameborder="0" allowfullscreen></iframe>




<iframe src="http://www.slideshare.net/slideshow/embed_code/3379277" width="590" height="460" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>




<iframe src="http://www.slideshare.net/slideshow/embed_code/3261710" width="590" height="460" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-Associative GORM Criteria with Projections]]></title>
    <link href="http://coderberry.me/blog/2011/03/29/multi-associative-gorm-criteria-with-projections/"/>
    <updated>2011-03-29T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2011/03/29/multi-associative-gorm-criteria-with-projections</id>
    <content type="html"><![CDATA[<p>I have three domain classes: Lead, Submission and BuyerLog:</p>

<p>``` java
class Lead {
  static hasMany = [ submissions: Submission ]
  Date dateCreated
  // ...
}</p>

<p>class Submission {
  static belongsTo = [ lead: Lead ]
  static hasMany = [ buyerLogs: BuyerLog ]
  Lead lead
  // ...
}</p>

<p>class BuyerLog {
  static belongsTo = [ submission: Submission ]
  Submission submission
  String leadBuyer
  // ...
}
```</p>

<p>I have a need to get the number of duplicate leads which share the same leadBuyer (in the BuyerLog domain class). Here is the SQL:</p>

<p>``` sql
SELECT count(l.id)
  FROM lead AS l, submission AS s, buyerLog as bl</p>

<pre><code>WHERE l.id = s.leadId
  AND s.id = bl.submissionId
  AND bl.leadBuyer = $buyerName
  AND l.id != $lead.id
  AND l.dateCreated::date &gt; $daysAgo
</code></pre>

<p>```</p>

<p>I want to do this using GORM / Criteria Builder. Here's my final code:</p>

<p>``` java
/<em>*
 * Count duplicate submissions within 45 days
 * SELECT count(l.id)
 *      FROM lead AS l, submission AS s, buyerLog as bl
 *      WHERE l.id = s.leadId
 *          AND s.id = bl.submissionId
 *          AND bl.leadBuyer = $buyerName
 *          AND l.id != $lead.id
 *          AND l.dateCreated::date > $daysAgo
 </em>/
protected def Boolean isDuplicateSubmission(Lead lead, ArrayList<String> buyerNames) {
  def isDuplicate = false
  def daysAgo = new Date() - 45
  def cnt = Lead.withCriteria {</p>

<pre><code>not {
  idEq(lead.id)
}
and {
  le('dateCreated', daysAgo)
  submissions {
    buyerLogs {
      inList('leadBuyer', buyerNames)
    }
  }
}
projections {
  rowCount()
}
</code></pre>

<p>  }
  return (cnt > 0)
}
```</p>

<p>Thanks to schmolly159 on the #grails freenode IRC channel for the examples and continued help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paginator for those suffering from PostgreSQL count(*) speed issues]]></title>
    <link href="http://coderberry.me/blog/2010/11/24/paginator-for-those-suffering-from-postgresql-count-star-speed-issues/"/>
    <updated>2010-11-24T00:00:00-07:00</updated>
    <id>http://coderberry.me/blog/2010/11/24/paginator-for-those-suffering-from-postgresql-count-star-speed-issues</id>
    <content type="html"><![CDATA[<p>Our company has been using PostgreSQL for  a very long time and has found it a very solid product for our needs. One thing that we've run into is that as our database grows (1mil+
records), there is a major slowdown on page loads due to a <a href="http://sql-info.de/postgresql/postgres-gotchas.html#1_7">PostgreSQL bug</a>.</p>

<p>To resolve this, I had to re-create a new paginator that didn't rely on the count(*) sql call. I changed it to work similar to how Google performs their queries relying solely on the offset and max to determine which pagination buttons to show.</p>

<p>Here's my final taglib:</p>

<p>``` java
package com.example</p>

<p>import org.springframework.web.servlet.support.RequestContextUtils as RCU</p>

<p>class PagerTagLib {</p>

<p>  /<em><em>
   * Creates next/previous links to support pagination for the current controller
   * This is developed to avoid problems with the PostgreSQL count(</em>) bug.
   * http://sql-info.de/postgresql/postgres-gotchas.html#1_7
   *
   * &lt;g:pager total="${accountListInstance.size()}" params="${params}" />
   </em>/
  def pager = { attrs -></p>

<pre><code>  def writer = out
  if (attrs.total == null) {
      throwTagError("Tag [pager] is missing required attribute [total] which is the total showing for the current page")
  }

  def messageSource = grailsAttributes.messageSource
  def locale = RCU.getLocale(request)

def total = attrs.int('total') ?: 0

  def action = (attrs.action ? attrs.action : (params.action ? params.action : "list"))
  def offset = params.int('offset') ?: 0
  def max = params.int('max')

  if (!offset) offset = (attrs.int('offset') ?: 0)
  if (!max) max = (attrs.int('max') ?: 10)

  def linkParams = [:]
  if (attrs.params) linkParams.putAll(attrs.params)
  linkParams.offset = offset - max
  linkParams.max = max
  if (params.sort) linkParams.sort = params.sort
  if (params.order) linkParams.order = params.order

  def linkTagAttrs = [action:action]
  if (attrs.controller) {
      linkTagAttrs.controller = attrs.controller
  }
  if (attrs.id!=null) {
      linkTagAttrs.id = attrs.id
  }
  linkTagAttrs.params = linkParams

  // determine paging variables
def isFirstStep = (offset == 0)
def isLastStep = (total &lt; max)

  // display previous link when not on firststep
  if (!isFirstStep) {
      linkTagAttrs.class = 'prevLink'
      linkParams.offset = offset - max
      writer &lt;&lt; link(linkTagAttrs.clone()) {
          (attrs.prev ? attrs.prev : messageSource.getMessage('paginate.prev', null, messageSource.getMessage('default.paginate.prev', null, 'Previous', locale), locale))
      }
  }

  // display next link when not on laststep
  if (!isLastStep) {
      linkTagAttrs.class = 'nextLink'
      linkParams.offset = offset + max
      writer &lt;&lt; link(linkTagAttrs.clone()) {
          (attrs.next ? attrs.next : messageSource.getMessage('paginate.next', null, messageSource.getMessage('default.paginate.next', null, 'Next', locale), locale))
      }
  }
</code></pre>

<p>  }</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roll your own Ajax-Based Captcha in Grails]]></title>
    <link href="http://coderberry.me/blog/2010/10/28/roll-your-own-ajax-based-captcha-in-grails/"/>
    <updated>2010-10-28T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2010/10/28/roll-your-own-ajax-based-captcha-in-grails</id>
    <content type="html"><![CDATA[<p>Recently, I was asked to come up with a better solution to our
captcha needs. We have been using <a href="http://www.google.com/recaptcha">ReCaptcha</a>, which is great
but difficult to read at times, and has caused frustrated
customers and lost sales. I found a great solution at
<a href="http://www.jkdesign.org/captcha">http://www.jkdesign.org/captcha</a> which displays a number of
graphics and let's the user choose the right one to prove they
are human. Here is a screenshot of my implementation:</p>

<p><img src="/images/posts/Using-Criteria-Builder-with-Projections-1.png"></p>

<p>To make this work within Grails, I had to make several tweaks. The following files are required:</p>

<ul>
<li><a href="http://jqueryui.com/">JQuery 1.2+</a> (I am using version - 1.4.2)</li>
<li><a href="http://jqueryui.com/">JQuery UI</a> (I am using version - 1.8.2)</li>
<li><a href="http://gist.github.com/651605">jquery.simpleCaptcha-0.2.js</a></li>
<li><a href="/files/captchaImages.zip">Captcha Images</a> placed in images/captchaImages</li>
<li><a href="http://gist.github.com/651613">BCrypt.java</a> by Damien Miller</li>
<li>CaptchaController.groovy (below)</li>
</ul>


<p>Create a new controller called Captcha. This can really be named anything, but if you do rename it, it will have to be updated in the jquery.simpleCaptcha-0.2.js file or passed in as an option via the javascript.</p>

<p><div><script src='https://gist.github.com/1291660.js?file='></script>
<noscript><pre><code>package com.berry

import com.berry.BCrypt
import grails.converters.JSON

class CaptchaController {

    def index = {

        // Generate the SALT to be used for encryption and place in session
        def captchaSalt = session.captchaSalt ?: BCrypt.gensalt()
        session.selectedCaptchaText = null
        session.captchaSalt = captchaSalt

        // Modify below for custom images
        def images = [
                'house':        'images/captchaImages/01.png',
                'key':          'images/captchaImages/04.png',
                'flag':         'images/captchaImages/06.png',
                'clock':        'images/captchaImages/15.png',
                'bug':          'images/captchaImages/16.png',
                'pen':          'images/captchaImages/19.png',
                'light bulb':   'images/captchaImages/21.png',
                'musical note': 'images/captchaImages/40.png',
                'heart':        'images/captchaImages/43.png',
                'world':        'images/captchaImages/99.png'
        ]

        // Create the image array to be returned in JSON format
        def size = images.size()
        def num = Math.min(params.numImages ? params.int('numImages') : 5, size)
        def keys = images.keySet().toList()
        def used = []
        def random = new Random()
        (1..num).each { i -&gt;
            def idx = random.nextInt(keys.size())
            def item = keys.get(idx)
            keys.remove(idx)
            used &lt;&lt; item
        }

        // Select the 'chosen' text to be used for authentication and place in session
        def selectedText = used[random.nextInt(used.size())]
        def hashedSelectedText = BCrypt.hashpw(selectedText, captchaSalt);
        session.selectedCaptchaText = hashedSelectedText

//        println &quot;SELECTED: ${hashedSelectedText}&quot;
//        println &quot;USED: ${used.inspect()}&quot;

        // Generate object to be returned
        def ret = [
                text: selectedText,
                images: []
        ]
        used.each { u -&gt;
            ret['images'] &lt;&lt; [hash: BCrypt.hashpw(u, captchaSalt), file: images[u]]
        }

        render ret as JSON
    }
}</code></pre></noscript></div>
</p>

<p>What this controller does is return a JSON object with the data needed to generate the captcha. The JSON appears like so:</p>

<p><div><script src='https://gist.github.com/1291662.js?file='></script>
<noscript><pre><code>{
	&quot;text&quot;:&quot;heart&quot;,
	&quot;images&quot;:[
	  {
	    &quot;hash&quot;:&quot;$2a$10$GTcG7U1rt7XFBi4JVImT2Oo.E3D8FCzha2772XuXm7v28Kx2LNL5S&quot;,
	    &quot;file&quot;:&quot;images/captchaImages/99.png&quot;
	  },
	  {
	    &quot;hash&quot;:&quot;$2a$10$GTcG7U1rt7XFBi4JVImT2Oa5Y/I/cXOUj30kffPqyX0qxTnAACX6O&quot;,
	    &quot;file&quot;:&quot;images/captchaImages/43.png&quot;
	  },
	  {
	    &quot;hash&quot;:&quot;$2a$10$GTcG7U1rt7XFBi4JVImT2O8zeOa4.ed1s8pZS9AgkalcSSQm9pmbi&quot;,
	    &quot;file&quot;:&quot;images/captchaImages/15.png&quot;
	  },
	  {
	    &quot;hash&quot;:&quot;$2a$10$GTcG7U1rt7XFBi4JVImT2OSNYwC4RPwhNpuPYBbeNB0j4ozoItwDK&quot;,
	    &quot;file&quot;:&quot;images/captchaImages/06.png&quot;
	  },
	  {
	    &quot;hash&quot;:&quot;$2a$10$GTcG7U1rt7XFBi4JVImT2OLv6DzHHDX0aB2AwS1YEVZMp9cEpo2sq&quot;,
	    &quot;file&quot;:&quot;images/captchaImages/01.png&quot;
	  }
	]
}</code></pre></noscript></div>
</p>

<p>Now we just need to implement this in our GSP file and controller. Suppose we have a page like shown above with a pickup code and the last 4 digits of the persons phone number. With adding our captcha div and required javascript, our GSP would look like this:</p>

<p><div><script src='https://gist.github.com/1291664.js?file='></script>
<noscript><pre><code>&lt;!-- PLACE IN HEADER --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;${resource(dir:'js',file:'jquery.simpleCaptcha-0.2.js')}&quot;&gt;&lt;/script&gt;
&lt;style type=&quot;text/css&quot;&gt;
    img.simpleCaptcha {
        margin: 2px !important;
        cursor: pointer;
    }
    img.simpleCaptchaSelected {
        margin-bottom: 0px;
        border-bottom: 2px solid red;
    }
&lt;/style&gt;

&lt;!-- BODY CONTENTS --&gt;
&lt;g:form action=&quot;pickup&quot;&gt;

    &lt;div class=&quot;stylized myform&quot; style=&quot;width:542px;&quot;&gt;
        &lt;h2&gt;Your pickup code will be given to you by your loan consultant&lt;/h2&gt;

        &lt;g:if test=&quot;${flash.message}&quot;&gt;
            &lt;div class=&quot;error&quot;&gt;
                ${flash.message}
            &lt;/div&gt;
        &lt;/g:if&gt;

        &lt;div class=&quot;clearfix formField&quot;&gt;
            &lt;label class=&quot;label_only&quot;&gt;Pickup Code&lt;/label&gt;
            &lt;g:textField name=&quot;pickupCode&quot; value=&quot;${pickupCode}&quot; autocomplete=&quot;no&quot; class=&quot;text&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;clearfix formField&quot;&gt;
            &lt;label class=&quot;label_only&quot;&gt;Last 4 Digits of Phone&lt;/label&gt;
            &lt;span class=&quot;after_checkbox&quot; style=&quot;padding-right: 0px;&quot;&gt;(XXX) XXX-&lt;/span&gt;
            &lt;g:textField name=&quot;lastFourDigits&quot; value=&quot;${lastFourDigits}&quot; autocomplete=&quot;no&quot; class=&quot;text&quot; maxLength=&quot;4&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;clearfix formField&quot;&gt;
            &lt;label class=&quot;label_only&quot;&gt;Are You Human?&lt;/label&gt;
            &lt;div style=&quot;float: left; margin-left: 10px;&quot;&gt;
              &lt;!-- Begin Captcha --&gt;
                &lt;div id=&quot;captcha&quot;&gt;&lt;/div&gt;
              &lt;!-- End Captcha --&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;clearfix&quot; style=&quot;margin-top: 15px;&quot;&gt;
            &lt;label class=&quot;label_only&quot;&gt;&amp;nbsp;&lt;/label&gt;
            &lt;g:submitButton name=&quot;submit&quot; value=&quot;Show Me My Offer&quot; class=&quot;button&quot; /&gt;
        &lt;/div&gt;

    &lt;/div&gt;

&lt;/g:form&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    $(document).ready(function() {
        $('#captcha').simpleCaptcha({
            numImages: 5,
            introText: '&lt;p&gt;Are you human? Then pick out the &lt;strong class=&quot;captchaText&quot;&gt;&lt;/strong&gt;&lt;/p&gt;'
        });
    });
&lt;/script&gt;</code></pre></noscript></div>
</p>

<p>Finally, we need to perform the validation on the controller side. The modified authentication action would look like the following:</p>

<p>``` java
def pickup = {</p>

<pre><code>// Determine if the captcha is picked correctly
if (params.captchaSelection != session.selectedCaptchaText) {

  // They selected the correct Captcha image. Continue with Authentication

} else {
    flash.message = "You did not click the correct image below. Please Try Again."   
}
</code></pre>

<p>}
```</p>

<p>So there ya go. It's actually pretty easy and customers seem to like choosing an image much more than typing a word that is difficult to read.</p>
]]></content>
  </entry>
  
</feed>
